#Область ВспомогательныеПроцедурыИФункции 
&НаСервере
Функция РазборСоответствийИзМакета()
		
	Макет = ПолучитьМакет("Соответствия");
	тзСоответствия = Новый ТаблицаЗначений;
	тзСоответствия.Колонки.Добавить("ИмяМетаданных");
	тзСоответствия.Колонки.Добавить("ViewName");
	тзСоответствия.Колонки.Добавить("ИмяТаблицыВБД");
	тзСоответствия.Колонки.Добавить("СоотвПолей");
	тзСоответствия.Колонки.Добавить("СоотвТЧОбъекта");

	Стр = Неопределено;
	
	// Пропустим заголовок (начинаем со 2 строки)
	Для к = 2 По Макет.ВысотаТаблицы Цикл
		ИмяМетаданных = Макет.Область(к, 1, к, 1).Текст;
		ViewName      = Макет.Область(к, 3, к, 3).Текст;
		ИмяТЧОбъекта  = Макет.Область(к, 2, к, 2).Текст;
		Если ЗначениеЗаполнено(ИмяМетаданных) И Макет.Область(к, 1, к, 1).Шрифт.Жирный Тогда
			Стр = тзСоответствия.Добавить();
			Стр.ИмяМетаданных = ИмяМетаданных;
			Стр.ViewName      = ViewName;
			//Описание реквизитов объекта
			Стр.СоотвПолей    = Новый ТаблицаЗначений;
			Стр.СоотвПолей.Колонки.Добавить("ИмяПоля");
			Стр.СоотвПолей.Колонки.Добавить("ИмяПоляДляView");
			Стр.СоотвПолей.Колонки.Добавить("ИмяПоляВБД");
			//Описание табличных полей объекта
			Стр.СоотвТЧОбъекта    = Новый ТаблицаЗначений;
			Стр.СоотвТЧОбъекта.Колонки.Добавить("ИмяТЧ");
			Стр.СоотвТЧОбъекта.Колонки.Добавить("ViewName");
			Стр.СоотвТЧОбъекта.Колонки.Добавить("ИмяТаблицыВБД");
            Стр.СоотвТЧОбъекта.Колонки.Добавить("СоотвПолей");
		ИначеЕсли ЗначениеЗаполнено(ИмяТЧОбъекта) И Макет.Область(к, 2, к, 2).Шрифт.Жирный  Тогда
		    Если Стр = Неопределено Тогда
				Сообщить("Ошибка разбора соответствий (проверьте макет)!");
				Возврат Неопределено;
			КонецЕсли;
			
			Буф = Стр.СоотвТЧОбъекта.Добавить();
			Буф.ИмяТЧ = ИмяТЧОбъекта;
			Буф.ViewName = ViewName;

			//Описание реквизитов табличной части
			Буф.СоотвПолей    = Новый ТаблицаЗначений;
			Буф.СоотвПолей.Колонки.Добавить("ИмяПоля");
			Буф.СоотвПолей.Колонки.Добавить("ИмяПоляДляView");
			Буф.СоотвПолей.Колонки.Добавить("ИмяПоляВБД");

		ИначеЕсли ЗначениеЗаполнено(ИмяМетаданных) И НЕ Макет.Область(к, 1, к, 1).Шрифт.Жирный Тогда

			Если Стр = Неопределено Тогда
				Сообщить("Ошибка разбора соответствий (проверьте макет)!");
				Возврат Неопределено;
			КонецЕсли;
			
			Буф = Стр.СоотвПолей.Добавить();
			Буф.ИмяПоля = ИмяМетаданных;
			Буф.ИмяПоляДляView = ViewName;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат тзСоответствия;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуБД(СтруктураПараметров)
	
	// ТЗ для соответствий имён справочников и VIEW
	тзСоответствия = РазборСоответствийИзМакета();
	Если тзСоответствия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокОшибок = "";
	ЕстьОшибки = Ложь;
	
	МассивМетаданных = Новый Массив;
	
	Для Каждого Стр Из тзСоответствия Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(Стр.ИмяМетаданных));
	КонецЦикла;
	
	тзСтруктура = ПолучитьСтруктуруХраненияБазыДанных(МассивМетаданных, Истина);
	
	Для Каждого Стр Из тзСоответствия Цикл
		НазначитьИменаView(СтруктураПараметров, тзСтруктура,Стр,Стр.ИмяМетаданных,"Основная", ЕстьОшибки, СписокОшибок);	
		//Создадим структуры для табличных частей
		Если НЕ Стр.СоотвТЧОбъекта.Количество() = 0 Тогда
		      Для Каждого СтрТЧ Из Стр.СоотвТЧОбъекта Цикл
                  НазначитьИменаView(СтруктураПараметров,тзСтруктура,СтрТЧ,Стр.ИмяМетаданных+"."+СтрТЧ.ИмяТЧ,"ТабличнаяЧасть", ЕстьОшибки, СписокОшибок);
		      КонецЦикла
		КонецЕсли; 
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Сообщить(СписокОшибок, СтатусСообщения.Важное);
		Сообщить("Выполнение обработки прервано!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат тзСоответствия;
	
КонецФункции


Процедура НазначитьИменаView(СтруктураПараметров, тзСтруктура,Стр, ИмяМетаданных,Назначение,ЕстьОшибки, СписокОшибок)
	
	Найдено = тзСтруктура.НайтиСтроки(Новый Структура("ИмяТаблицы, Назначение", ИмяМетаданных, Назначение));
	Если Найдено.Количество() = 0 Тогда
		СписокОшибок = СписокОшибок + "Не найдена таблица описаний (" + ИмяМетаданных + ")" + Символы.ПС;
		ЕстьОшибки = Истина;
		Возврат;
	ИначеЕсли Найдено.Количество() > 1 Тогда
		СписокОшибок = СписокОшибок + "Найдено несколько таблиц описаний (" + ИмяМетаданных + ")" + Символы.ПС;
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Стр.ИмяТаблицыВБД = Найдено[0].ИмяТаблицыХранения;
	
	// Задаём соответствие полей
	
	Для Каждого Поле Из Найдено[0].Поля Цикл
		
		НайденоСоотвПоля = Стр.СоотвПолей.НайтиСтроки(Новый Структура("ИмяПоля", Поле.ИмяПоля));
		Если НайденоСоотвПоля.Количество() = 0 Тогда
			Если СтруктураПараметров.ДобавитьВсеПоляВоView Тогда
				Буф = Стр.СоотвПолей.Добавить();
				Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда
					Буф.ИмяПоля        = Поле.ИмяПоля;
					Буф.ИмяПоляДляView = Поле.ИмяПоля;
				иначе
					Буф.ИмяПоля        = Поле.ИмяПоляХранения;
					Буф.ИмяПоляДляView = Поле.ИмяПоляХранения;
				КонецЕсли; 
				Буф.ИмяПоляВБД     = Поле.ИмяПоляХранения;
			КонецЕсли;
		Иначе
			НайденоСоотвПоля[0].ИмяПоляВБД = Поле.ИмяПоляХранения;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим на наличие незаполненных полей
	НайденоПустых = Стр.СоотвПолей.НайтиСтроки(Новый Структура("ИмяПоляВБД", Неопределено));
	Для Каждого Поле Из НайденоПустых Цикл
		СписокОшибок = СписокОшибок + "Не найдено соответствие поля (" + Поле.ИмяПоля + ") для View!)" + Символы.ПС;
		ЕстьОшибки = Истина;
		Возврат;
	КонецЦикла;
	
	
	
КонецПроцедуры
 
&НаСервере
Функция SafeArray2Стр(Arr)
	
	ВремМассив = Arr.Выгрузить();
	
	Буф = "";
	Для Каждого Стр Из ВремМассив Цикл
		Буф = Буф + Стр;
	КонецЦикла;
	
	Возврат Буф;
	
КонецФункции

&НаСервере
Функция СобратьЗапросДляView(СтрТаблица, DBSrcName, DBSrcSchema, DBDstName, DBDstSchema,ИмяВладельца)
	
	СписокПолей = "";
	
	Для Каждого Стр Из СтрТаблица.СоотвПолей Цикл
		Если Стр.ИмяПоляВБД = "_KeyField" Тогда
		  продолжить;
		КонецЕсли; 
		ИмяПоляВБД = ?(Стр.ИмяПоляВБД = "_IDRRef","CONVERT(uniqueidentifier,_IDRRef)",Стр.ИмяПоляВБД);
		//ИмяПоляВБД = Стр.ИмяПоляВБД;
		СписокПолей = СписокПолей + ИмяПоляВБД + " AS [" + Стр.ИмяПоляДляView + "], ";
	КонецЦикла;
	Если ЗначениеЗаполнено(ИмяВладельца) Тогда
		 ИмяПоляВБД = "CONVERT(uniqueidentifier,"+ИмяВладельца+"_IDRRef)";
	     СписокПолей = СписокПолей + ИмяПоляВБД + " AS [_IDRRef], ";
	КонецЕсли; 
	СписокПолей = Лев(СписокПолей, СтрДлина(СписокПолей)-2); // cut comma
	
	//Буф = "CREATE VIEW " + DBNameDst + СтрТаблица.ViewName + " AS SELECT " + СписокПолей + " FROM " + DBNameSrc + ".dbo." + СтрТаблица.ИмяТаблицыВБД + ";";
	Буф = "CREATE VIEW " + DBDstSchema + "[" +СтрТаблица.ViewName + "] AS SELECT " + СписокПолей + " FROM " + DBSrcName + "." + DBSrcSchema + СтрТаблица.ИмяТаблицыВБД + ";";
	
	Возврат Буф;
КонецФункции

&НаСервере
Функция СобратьПеречисленияНаСервере()
	ТаблицаПеречислений = Новый ТаблицаЗначений;
	ТаблицаПеречислений.Колонки.Добавить("Ссылка");
	ТаблицаПеречислений.Колонки.Добавить("Имя");
	ТаблицаПеречислений.Колонки.Добавить("Наименование");
	Для каждого ЭлементМетаданных Из Метаданные.Перечисления Цикл
		ИмяПеречисления = ЭлементМетаданных.Имя;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеречислениеЭлементы.Ссылка
		|ИЗ
		|	Перечисление."+ИмяПеречисления+" КАК ПеречислениеЭлементы";
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ГУИДУдОбъктаСтр = Лев(Прав(ЗначениеВСтрокуВнутр(ВыборкаДетальныеЗаписи.Ссылка),33),32);
			ГУИД = Сред(ГУИДУдОбъктаСтр,7,2)+Сред(ГУИДУдОбъктаСтр,5,2)+Сред(ГУИДУдОбъктаСтр,3,2)+Лев(ГУИДУдОбъктаСтр,2)+"-"+Сред(ГУИДУдОбъктаСтр,11,2)+Сред(ГУИДУдОбъктаСтр,9,2)+"-"+Сред(ГУИДУдОбъктаСтр,15,2)+Сред(ГУИДУдОбъктаСтр,13,2)+"-"+Сред(ГУИДУдОбъктаСтр,17,4)+"-"+Прав(ГУИДУдОбъктаСтр,12);
			Наименование = Строка(ВыборкаДетальныеЗаписи.Ссылка);
			НоваяСтрока =ТаблицаПеречислений.Добавить();
			НоваяСтрока.Ссылка = ГУИД;
			НоваяСтрока.Имя = XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка);
			НоваяСтрока.Наименование = Наименование;
		КонецЦикла;
	КонецЦикла;
	
	возврат ТаблицаПеречислений;
КонецФункции

#КонецОбласти

&НаСервере
Процедура СоздатьViewServer(СтруктураПараметров) Экспорт
	
	тзСоответствия = ПолучитьТаблицуБД(СтруктураПараметров);
	
	тзПеречисления = СобратьПеречисленияНаСервере();
	Если тзСоответствия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	DBDstFullname = СтруктураПараметров.DBDstFullname;
	DBSrcFullname = СтруктураПараметров.DBSrcFullname;
	ServerName    = СтруктураПараметров.ServerName;
	Поз = Найти(DBDstFullname, ".");
	Если Поз = 0 Тогда // Нет схемы в описании, добавляем .dbo
		DBDstName = DBDstFullname;
		DBDstSchema = "dbo."
	Иначе
		DBDstName   = Лев(DBDstFullname, Поз-1);
		DBDstSchema = Прав(DBDstFullname, СтрДлина(DBDstFullname)-Поз) + ".";
	КонецЕсли;
	
	Поз = Найти(DBSrcFullname, ".");
	Если Поз = 0 Тогда // Нет схемы в описании, добавляем .dbo
		DBSrcName = DBSrcFullname;
		DBSrcSchema = "dbo."
	Иначе
		DBSrcName   = Лев(DBSrcFullname, Поз-1);
		DBSrcSchema = Прав(DBSrcFullname, СтрДлина(DBSrcFullname)-Поз) + ".";
	КонецЕсли;
		
	
	objConn = Новый COMОбъект("ADODB.Connection");
	//Определяем параметры подключения к базе данных	
	ConnectString = "Provider=SQLOLEDB;" + "Data Source=" + ServerName + ";";
	Если СтруктураПараметров.WindowsAuth Тогда
		ConnectString = ConnectString + "Integrated Security=SSPI;";
	Иначе
		ConnectString = ConnectString + "UID=" + СтруктураПараметров.UID + ";PWD=" + СтруктураПараметров.PWD + ";";
	КонецЕсли;
	
	objConn.ConnectionString = ConnectString;
	objConn.ConnectionTimeOut = 15;
	objConn.CommandTimeout = 30;
	
	//Подключаемся к базе данных
	objConn.Open();
	
	objRecordset = objConn.Execute("USE " + DBDstName  + ";"); // Устанавливаем текущую БД
	
	//Создадим таблицу перечислений
	
	TableName = DBDstSchema + "[ENUMERATION]";
	objRecordset = objConn.Execute("IF OBJECT_ID('" + TableName + "', 'U') IS NOT NULL DROP TABLE " + TableName + ";");
    objRecordset = objConn.Execute("CREATE TABLE "+TableName+"(IDRREF uniqueidentifier, NAME NVARCHAR(400), DESCRIPTION NVARCHAR(400));");

	Для каждого строкаТз Из тзПеречисления Цикл
		objRecordset = objConn.Execute(" INSERT INTO "+TableName+"VALUES('"+строкаТз.Ссылка+"','"+строкаТз.Имя+"','"+строкаТз.Наименование+"');");
	КонецЦикла;
	 objRecordset = objConn.Execute("CREATE UNIQUE CLUSTERED INDEX PK_ENUMERATION ON "+ TableName+"(IDRREF)");
	//, INDEX PK_ENUMERATION CLUSTERED (IDRREF)
	Отказ = Ложь;
	// Создаем View
	Для Каждого Стр Из тзСоответствия Цикл
		Если Стр.СоотвПолей.Количество() = 0 Тогда
			Сообщить("Нет полей для создания View (" + Стр.ИмяМетаданных + "). Создание пропущено.", СтатусСообщения.ОченьВажное);
		Иначе
			ВыполнитьЗапросCreateView(СтруктураПараметров,Стр,objConn,DBDstSchema,DBDstName, DBSrcName,DBSrcSchema,"");	
		КонецЕсли;
		
		Для каждого стрТЧ Из Стр.СоотвТЧОбъекта Цикл
			ВыполнитьЗапросCreateView(СтруктураПараметров, СтрТЧ, objConn,DBDstSchema,DBDstName,DBSrcName,DBSrcSchema,Стр.ИмяТаблицыВБД);
		КонецЦикла; 
		
	КонецЦикла;
	
	Сообщить("Представления созданы!");	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросCreateView(СтруктураПараметров,Стр, objConn,DBDstSchema,DBDstName,DBSrcName,DBSrcSchema,ИмяВладельца)
	
	ViewName = DBDstSchema + "[" + Стр.ViewName + "]";
	objRecordset = objConn.Execute("IF OBJECT_ID('" + ViewName + "', 'V') IS NOT NULL DROP VIEW " + ViewName + ";");
		
	ЗапросСозданияView = СобратьЗапросДляView(Стр, DBSrcName, DBSrcSchema, DBDstName, DBDstSchema,ИмяВладельца);
	
	objRecordset = objConn.Execute(ЗапросСозданияView);
	
	Если НЕ СтруктураПараметров.ВыбратьДанныеИзView Тогда 
		возврат;
	КонецЕсли;
	
	objRecordset = objConn.Execute("SELECT * FROM " + DBDstName + "." + DBDstSchema + Стр.ViewName + ";");
	
	//Перебираем результаты запроса
	Пока objRecordset.EOF <> 1 Цикл
		i = 0;
		Буф = "";
		Пока i <= objRecordset.Fields.Count-1 Цикл
			
			Если ТипЗнч(objRecordset.Fields(i).Value) = Тип("COMSafeArray") Тогда
				Тмп = SafeArray2Стр(objRecordset.Fields(i).Value);
			Иначе
				Тмп = Строка(objRecordset.Fields(i).Value);
			КонецЕсли;
			
			Буф = Буф + Тмп + Символы.Таб + "|";
			i = i + 1;
		КонецЦикла;
		Сообщить(Буф);
		objRecordset.MoveNext();
	КонецЦикла;
	
КонецПроцедуры
 
