#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
	СтруктураПараметров = ПервоначальноеСканирование();
	
    Если СтруктураПараметров.ФайловыйВариант Тогда
        ТекстСообщения = НСтр("ru = 'Представления собираются только для клиент-серверного варианта базы'");
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(DBSrcFullname) Тогда
		DBSrcFullname = СтруктураПараметров.ИмяИнформационнойБазы;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ServerName) Тогда
		ServerName = "localhost";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(DBDstFullname) Тогда
		DBDstFullname = "TempDb";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(UID) Тогда
		UID = "sa";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(PWD) Тогда
		PWD = "qwerty";
	КонецЕсли;
	
	ДобавитьВсеПоляВоView = Истина;
    
    WindowsAuthПриИзменении(Неопределено)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура СоздатьПредставления(Команда)
    ПараметрыИнтеграции = СобратьПараметрыИнтеграции(); 
    СоздатьПредставленияНаСервере(ПараметрыИнтеграции);
КонецПроцедуры

&НаСервере
Процедура СоздатьПредставленияНаСервере(ПараметрыИнтеграции)
    Отказ = Ложь;
    //Колонки: "ИмяМетаданных","ViewName","ИмяТаблицыВБД","СоотвПолей","СоотвТЧОбъекта"
    ТаблицаСоответствий = ПолучитьТаблицуИзМакета(Отказ);
    
    ЗаполнитьТаблицуСоответствий(ТаблицаСоответствий,Отказ);
    
    ТаблицаСоответствий_Перечисления = ЗаполнитьТаблицуСоответствийДляПеречислений(Отказ);
    
    Если Отказ Тогда
        Возврат;
    КонецЕсли; 
    
    Попытка
        ADODBConnect = СоздатьComObjectADO(ПараметрыИнтеграции);
        objRecordset = ИспользоватьБазуПриемник(ПараметрыИнтеграции, ADODBConnect);
    Исключение
        Сообщение = НСтр("ru = 'Ошибка подключения к базе %1:
        |Описание ошибки: %2'") ;
        Сообщить(СтрШаблон(Сообщение, ОписаниеОшибки()));
        Отказ = Истина;
        Возврат;
    КонецПопытки;
    
    СоздатьТаблицуПеречислений(ПараметрыИнтеграции,ADODBConnect,ТаблицаСоответствий_Перечисления, Отказ);    
    
    // Создаем представления в шине на приемнике
    Для Каждого стрТаблицы Из ТаблицаСоответствий Цикл
        Если стрТаблицы.СоотвПолей.Количество() = 0 Тогда
            Сообщение = СтрШаблон(НСтр("ru = '(Нет полей для создания Представления объекта: %1. Создание пропущено.'"), стрТаблицы.ИмяМетаданных);
            Сообщить(Сообщение, СтатусСообщения.ОченьВажное);
            Продолжить;
        Иначе
            ВыполнитьЗапросCreateView(ПараметрыИнтеграции,стрТаблицы,ADODBConnect,"",Отказ);	
        КонецЕсли;
        
        //Создание логической таблицы для подчиненного объекта (табличные части документов, справочников)
        Для каждого стрТЧ Из стрТаблицы.СоотвТЧОбъекта Цикл
            ВыполнитьЗапросCreateView(ПараметрыИнтеграции, СтрТЧ, ADODBConnect,стрТаблицы.ИмяТаблицыВБД, Отказ);
        КонецЦикла; 
    КонецЦикла;
    
    Сообщение = НСтр("ru = 'Создание логических таблиц в сервисной шине выполнено успешно.'");
    Сообщить(Сообщение);	
КонецПроцедуры


#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура WindowsAuthПриИзменении(Элемент)
	Элементы.UID.Доступность = НЕ WindowsAuth;
	Элементы.PWD.Доступность = НЕ WindowsAuth;
КонецПроцедуры
#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Функция СобратьПараметрыИнтеграции()
    ПараметрыИнтеграции = Новый Структура();
    
    Поз = Найти(DBDstFullname, ".");
    Если Поз = 0 Тогда // Нет схемы в описании, добавляем dbo
        DBDstName = DBDstFullname;
        DBDstSchema = "[dbo]."
    Иначе
        DBDstName   = Лев(DBDstFullname, Поз-1);
        DBDstSchema = Прав(DBDstFullname, СтрДлина(DBDstFullname)-Поз) + ".";
    КонецЕсли;
    
    Поз = Найти(DBSrcFullname, ".");
    Если Поз = 0 Тогда // Нет схемы в описании, добавляем dbo
        DBSrcName = DBSrcFullname;
        DBSrcSchema = "[dbo]."
    Иначе
        DBSrcName   = Лев(DBSrcFullname, Поз-1);
        DBSrcSchema = Прав(DBSrcFullname, СтрДлина(DBSrcFullname)-Поз) + ".";
    КонецЕсли;
    
    ПараметрыИнтеграции.Вставить("ЛогинСУБД",UID);
    ПараметрыИнтеграции.Вставить("ПарольСУБД",PWD);
    ПараметрыИнтеграции.Вставить("СерверСУБД",ServerName);
    ПараметрыИнтеграции.Вставить("АутенфикацияОС", WindowsAuth);
    
    ПараметрыИнтеграции.Вставить("СхемаИсточник", DBSrcSchema);
    ПараметрыИнтеграции.Вставить("БазаИсточник",  DBSrcName);
    
    ПараметрыИнтеграции.Вставить("СхемаПриемник", DBDstSchema);
    ПараметрыИнтеграции.Вставить("БазаПриемник",  DBDstName);
    Возврат ПараметрыИнтеграции;
    
КонецФункции // СобратьПараметрыИнтеграции()
 
&НаСервере
Функция ПервоначальноеСканирование()
	СтруктураПараметров = Новый Структура(); 
	Соединения = ПолучитьСоединенияИнформационнойБазы();
	Для каждого СоединениеИнформационнойБазы Из Соединения Цикл
		
		Если СоединениеИнформационнойБазы.Пользователь.Имя = ИмяПользователя() И  (СоединениеИнформационнойБазы.ИмяПриложения="1CV8" ИЛИ СоединениеИнформационнойБазы.ИмяПриложения="1CV8C")  Тогда
			Если Лев(СтрокаСоединенияИнформационнойБазы(),5)="File=" Тогда
				СтруктураПараметров.Вставить("ФайловыйВариант",Истина);
			Иначе
				СтруктураПараметров.Вставить("ФайловыйВариант",Ложь);
				
				Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr=");
				ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 6);
                //* TODO: 28.03.17 (Андреев М.А.) 
                //Пока считаем что сервер 1С и СУБД находятся на одном сервере
                //Переделать на получение с помощью "Средства интеграции и администрирования"
				ИмяСервераИБ = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
				Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Ref=");
				ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 5);
				ИмяИнформационнойБазы = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
				СтруктураПараметров.Вставить("ИмяСервераИБ",ИмяСервераИБ);
				СтруктураПараметров.Вставить("ИмяИнформационнойБазы","["+ИмяИнформационнойБазы+"]");
			КонецЕсли;    
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции
#КонецОбласти

#Область ПроцедурыФункцииСозданияПредставлений 

&НаСервере
Функция ПолучитьТаблицуИзМакета(Отказ)
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
    Макет = ОбработкаОбъект.ПолучитьМакет("Соответствия");
    //Инициализация коллекция для хранения
    тзСоответствия = Новый ТаблицаЗначений;
    тзСоответствия.Колонки.Добавить("ИмяМетаданных");
    тзСоответствия.Колонки.Добавить("ViewName");
    тзСоответствия.Колонки.Добавить("ИмяТаблицыВБД");
    тзСоответствия.Колонки.Добавить("СоотвПолей");
    тзСоответствия.Колонки.Добавить("СоотвТЧОбъекта");
    Стр = Неопределено;
    // Пропустим заголовок (начинаем со 2 строки)
    Для к = 2 По Макет.ВысотаТаблицы Цикл
        ИмяМетаданных = Макет.Область(к, 1, к, 1).Текст;
        ViewName      = Макет.Область(к, 3, к, 3).Текст;
        ИмяТЧОбъекта  = Макет.Область(к, 2, к, 2).Текст;
        Если ЗначениеЗаполнено(ИмяМетаданных) И Макет.Область(к, 1, к, 1).Шрифт.Жирный Тогда
            //Объект метаданных
            строкаТЧ = Неопределено;
            Стр = тзСоответствия.Добавить();
            Стр.ИмяМетаданных  = ИмяМетаданных;
            Стр.ViewName       = ViewName;
            Стр.СоотвПолей     = ИнициализироватьКоллекцию("СоотвПолей");
            Стр.СоотвТЧОбъекта = ИнициализироватьКоллекцию();
        ИначеЕсли ЗначениеЗаполнено(ИмяТЧОбъекта) И Макет.Область(к, 2, к, 2).Шрифт.Жирный  Тогда
            //Табличная часть объекта
            Если Стр = Неопределено Тогда
                Отказ = Истина;
                Продолжить;
            КонецЕсли;
            строкаТЧ               = Стр.СоотвТЧОбъекта.Добавить();
            строкаТЧ.ИмяТЧ         = ИмяТЧОбъекта;
            строкаТЧ.ViewName      = ViewName;
            строкаТЧ.СоотвПолей    = ИнициализироватьКоллекцию("СоотвПолей");  
         ИначеЕсли ЗначениеЗаполнено(ИмяТЧОбъекта) И НЕ Макет.Область(к, 2, к, 2).Шрифт.Жирный  Тогда
            //Поля табличной части
            Если строкаТЧ = Неопределено Тогда
                Отказ = Истина;
                Продолжить;
            КонецЕсли;
            Буф = строкаТЧ.СоотвПолей.Добавить();
            Буф.ИмяПоля = ИмяТЧОбъекта;
            Буф.ИмяПоляДляView = ViewName;
        ИначеЕсли ЗначениеЗаполнено(ИмяМетаданных) И НЕ Макет.Область(к, 1, к, 1).Шрифт.Жирный Тогда
            //Поля объекта метаданных
            Если Стр = Неопределено Тогда
                Отказ = Истина;
                Продолжить;
            КонецЕсли;
            Буф = Стр.СоотвПолей.Добавить();
            Буф.ИмяПоля = ИмяМетаданных;
            Буф.ИмяПоляДляView = ViewName;
        Иначе
            Продолжить;
        КонецЕсли;
        
    КонецЦикла;
    
    Если Отказ Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка разбора соответствий (проверьте макет)!'");
        Сообщить(ТекстСообщения);
    КонецЕсли; 
    Возврат тзСоответствия;
КонецФункции

&НаСервере
Функция ИнициализироватьКоллекцию(ТипКоллекции = "")
    Если ТипКоллекции = "СоотвПолей" Тогда
        //Описание реквизитов объекта
        тзКоллекция    = Новый ТаблицаЗначений;
        тзКоллекция.Колонки.Добавить("ИмяПоля");
        тзКоллекция.Колонки.Добавить("ИмяПоляДляView");
        тзКоллекция.Колонки.Добавить("ИмяПоляВБД");
        //Описание табличных полей объекта
    иначе
        тзКоллекция    = Новый ТаблицаЗначений;
        тзКоллекция.Колонки.Добавить("ИмяТЧ");
        тзКоллекция.Колонки.Добавить("ViewName");
        тзКоллекция.Колонки.Добавить("ИмяТаблицыВБД");
        тзКоллекция.Колонки.Добавить("СоотвПолей");
    КонецЕсли;
    Возврат тзКоллекция;
КонецФункции // ИнициализироватьКоллекцию("СоотвПолей")
 

&НаСервере
Процедура ЗаполнитьТаблицуСоответствий(ТаблицаСоответствий, Отказ)
    Если Отказ Тогда
       Возврат;
    КонецЕсли; 
    
    МассивМетаданных = Новый Массив;
    
    Для Каждого Стр Из ТаблицаСоответствий Цикл
        ЭлементМетаданных = Метаданные.НайтиПоПолномуИмени(Стр.ИмяМетаданных);
        Если ЭлементМетаданных = Неопределено Тогда
           Отказ = Истина;
           ТекстСообщения = СтрШаблон(НСтр("ru = 'Для  объекта из макета: %1, не найден объект метаданных в системе'"), Стр.ИмяМетаданных);
           Сообщить(ТекстСообщения);
           Возврат;
        КонецЕсли; 
    	МассивМетаданных.Добавить(ЭлементМетаданных);
    КонецЦикла;
    
    Попытка
        тзСтруктура = ПолучитьСтруктуруХраненияБазыДанных(МассивМетаданных, Истина);
    Исключение
        ТекстСообщения = СтрШаблон(НСтр("ru = 'Для  объектов из макета не найдено описание метаданных в конфигурации: %1'"), ОписаниеОшибки());
        Сообщить(ТекстСообщения);
        Отказ = Истина;
        Возврат;
    КонецПопытки; 
    
    
    ТекстОшибки = "";
    Для Каждого стрТаблицы Из ТаблицаСоответствий Цикл
        СобратьОписаниеМетаданных(тзСтруктура,стрТаблицы,стрТаблицы.ИмяМетаданных,"Основная", ТекстОшибки);	
        //Создадим структуры для табличных частей
        Если НЕ Стр.СоотвТЧОбъекта.Количество() = 0 Тогда
              Для Каждого СтрТЧ Из Стр.СоотвТЧОбъекта Цикл
                  СобратьОписаниеМетаданных(тзСтруктура,СтрТЧ,Стр.ИмяМетаданных+"."+СтрТЧ.ИмяТЧ,"ТабличнаяЧасть", ТекстОшибки);
              КонецЦикла
        КонецЕсли; 
    КонецЦикла;
    
    Если ЗначениеЗаполнено(ТекстОшибки) Тогда
    	Сообщить(ТекстОшибки, СтатусСообщения.Важное);
    	Сообщить("Выполнение обработки прервано!", СтатусСообщения.Важное);
        Отказ = Истина;
    	Возврат;
    КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СобратьОписаниеМетаданных(тзСтруктура, стрТаблицы,ИмяМетаданных, Назначение, ТекстОшибки)
	Найдено = тзСтруктура.НайтиСтроки(Новый Структура("ИмяТаблицы, Назначение", ИмяМетаданных, Назначение));
	Если Найдено.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + "Не найдена таблица описаний (" + ИмяМетаданных + ")" + Символы.ПС;
		Возврат;
	ИначеЕсли Найдено.Количество() > 1 Тогда
		ТекстОшибки = ТекстОшибки + "Найдено несколько таблиц описаний (" + ИмяМетаданных + ")" + Символы.ПС;
		Возврат;
	КонецЕсли;
	
	стрТаблицы.ИмяТаблицыВБД = Найдено[0].ИмяТаблицыХранения;
	
	Для Каждого Поле Из Найдено[0].Поля Цикл
		НайденоСоотвПоля = стрТаблицы.СоотвПолей.НайтиСтроки(Новый Структура("ИмяПоля", Поле.ИмяПоля));
        Если НайденоСоотвПоля.Количество() = 0 Тогда
            //* TODO: 29.03.18 (Андреев М.А.) 
            //Можно также получать описания реквизитов из макета
			Если Истина Тогда//СтруктураПараметров.ДобавитьВсеПоля Тогда
				Буф = стрТаблицы.СоотвПолей.Добавить();
				Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда
					Буф.ИмяПоля        = Поле.ИмяПоля;
					Буф.ИмяПоляДляView = Поле.ИмяПоля;
				иначе
					Буф.ИмяПоля        = Поле.ИмяПоляХранения;
					Буф.ИмяПоляДляView = Поле.ИмяПоляХранения;
				КонецЕсли; 
				Буф.ИмяПоляВБД     = Поле.ИмяПоляХранения;
			КонецЕсли;
		Иначе
			НайденоСоотвПоля[0].ИмяПоляВБД = Поле.ИмяПоляХранения;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим на наличие незаполненных полей
	НайденоПустых = стрТаблицы.СоотвПолей.НайтиСтроки(Новый Структура("ИмяПоляВБД", Неопределено));
	Для Каждого Поле Из НайденоПустых Цикл
		ТекстОшибки = ТекстОшибки + "Не найдено соответствие поля (" + Поле.ИмяПоля + ") для View!)" + Символы.ПС;
		Возврат;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуСоответствийДляПеречислений(Отказ)
    Если Отказ Тогда
      Возврат Неопределено;
    КонецЕсли; 
	ТаблицаПеречислений = Новый ТаблицаЗначений;
	ТаблицаПеречислений.Колонки.Добавить("Ссылка");
	ТаблицаПеречислений.Колонки.Добавить("Имя");
	ТаблицаПеречислений.Колонки.Добавить("Наименование");
	Для каждого ЭлементМетаданных Из Метаданные.Перечисления Цикл
		ИмяПеречисления = ЭлементМетаданных.Имя;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеречислениеЭлементы.Ссылка
		|ИЗ
		|	Перечисление."+ИмяПеречисления+" КАК ПеречислениеЭлементы";
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ГУИДУдОбъктаСтр = Лев(Прав(ЗначениеВСтрокуВнутр(ВыборкаДетальныеЗаписи.Ссылка),33),32);
			ГУИД = Сред(ГУИДУдОбъктаСтр,7,2)+Сред(ГУИДУдОбъктаСтр,5,2)+Сред(ГУИДУдОбъктаСтр,3,2)+Лев(ГУИДУдОбъктаСтр,2)+"-"+Сред(ГУИДУдОбъктаСтр,11,2)+Сред(ГУИДУдОбъктаСтр,9,2)+"-"+Сред(ГУИДУдОбъктаСтр,15,2)+Сред(ГУИДУдОбъктаСтр,13,2)+"-"+Сред(ГУИДУдОбъктаСтр,17,4)+"-"+Прав(ГУИДУдОбъктаСтр,12);
			Наименование = Строка(ВыборкаДетальныеЗаписи.Ссылка);
			НоваяСтрока =ТаблицаПеречислений.Добавить();
			НоваяСтрока.Ссылка = ГУИД;
			НоваяСтрока.Имя = XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка);
			НоваяСтрока.Наименование = Наименование;
		КонецЦикла;
	КонецЦикла;
	
	возврат ТаблицаПеречислений;
КонецФункции

// Функция создает подключение к СУБД, указанной в параметрах через технологию COM (библиотека ADODB)
//
// Параметры:
//  ПараметрыИнтеграции  - <Структура> - содержит необходимые параметры для создания объекта
//                        ПараметрыИнтеграции.СерверСУБД
//                        ПараметрыИнтеграции.АутенфикацияОС
//                        ПараметрыИнтеграции.ЛогинСУБД
//                        ПараметрыИнтеграции.ПарольСУБД
//
// Возвращаемое значение:
//   <КомОбъект ADODB>   
//               
Функция СоздатьComObjectADO(ПараметрыИнтеграции) Экспорт
	
	ADODBConnect = Новый COMОбъект("ADODB.Connection");
	//Определяем параметры подключения к базе данных	
	ConnectString = "Provider=SQLOLEDB;" + "Data Source=" + ПараметрыИнтеграции.СерверСУБД + ";";
	Если ПараметрыИнтеграции.АутенфикацияОС Тогда
		ConnectString = ConnectString + "Integrated Security=SSPI;";
	Иначе
		ConnectString = ConnectString + "UID=" + ПараметрыИнтеграции.ЛогинСУБД + ";PWD=" + ПараметрыИнтеграции.ПарольСУБД + ";";
	КонецЕсли;
	
	ADODBConnect.ConnectionString = ConnectString;
	ADODBConnect.ConnectionTimeOut = 15;
	ADODBConnect.CommandTimeout = 30;
	
	//Подключаемся к базе данных
	ADODBConnect.Open();
    //Сообщение = НСтр("ru = 'СоздатьComObjectADO: Создание объекта ADO DB выполнено успешно.'");
    //РаботаСЖурналомСобытий.ЗаписатьСообщение(ПараметрыИнтеграции, Сообщение);
    
    Возврат ADODBConnect;
КонецФункции // СоздатьComObjectADO(ПараметрыИнтеграции, Отказ)

// Функция позволяет использовать конкретную базу СУБД
//
// Параметры:
//  ПараметрыИнтеграции  - <Структура> 
//                        ПараметрыИнтеграции.БазаODS - конкретная база СУБД
//  Отказ                - <Булево> 
//                
// Возвращаемое значение:
//   Набор записей(Recordset)   
//
Функция ИспользоватьБазуПриемник(ПараметрыИнтеграции, ADODBConnect) Экспорт
	objRecordset = ADODBConnect.Execute("USE "+ПараметрыИнтеграции.БазаПриемник  + ";");
    //Сообщение = НСтр("ru = 'ИспользоватьБазу: Подключение к базе %1 выполнено успешно.'");
    //РаботаСЖурналомСобытий.ЗаписатьСобытие(ПараметрыИнтеграции,Перечисления.ккСобытия.Информация,ТекущаяДатаСеанса(),Сообщение);
	Возврат objRecordset;	
КонецФункции // ПараметрыИнтеграции, Отказ()

&НаСервере
Процедура СоздатьТаблицуПеречислений(ПараметрыИнтеграции,ADODBConnect,тзПеречисления, Отказ)
    Если Отказ Тогда
        Возврат;
    КонецЕсли; 
    TableName = ПараметрыИнтеграции.СхемаПриемник + "[ENUMERATION]";
    Попытка
        objRecordset = ADODBConnect.Execute("IF OBJECT_ID('" + TableName + "', 'U') IS NOT NULL DROP TABLE " + TableName + ";");
        objRecordset = ADODBConnect.Execute("CREATE TABLE "+TableName+"(IDRREF uniqueidentifier, NAME NVARCHAR(400), DESCRIPTION NVARCHAR(400));");
        
        Для каждого строкаТз Из тзПеречисления Цикл
            objRecordset = ADODBConnect.Execute(" INSERT INTO "+TableName+"VALUES('"+строкаТз.Ссылка+"','"+строкаТз.Имя+"','"+строкаТз.Наименование+"');");
        КонецЦикла;
        objRecordset = ADODBConnect.Execute("CREATE UNIQUE CLUSTERED INDEX PK_ENUMERATION ON "+ TableName+"(IDRREF)");
    Исключение
        Отказ = Истина;
    КонецПопытки; 
КонецПроцедуры // СоздатьТаблицуПеречислений()


//Процедура ВыполнитьЗапросCreateView(СтруктураПараметров,Стр, objConn,DBDstSchema,DBDstName,DBSrcName,DBSrcSchema,ИмяВладельца)
&НаСервере
Процедура ВыполнитьЗапросCreateView(ПараметрыИнтеграции,Стр, ADODBConnect,ИмяВладельца,Отказ)

	
    
    ViewName = ПараметрыИнтеграции.СхемаПриемник + "[" + Стр.ViewName + "]";
    
    objRecordset = ADODBConnect.Execute("IF OBJECT_ID('" + ViewName + "', 'V') IS NOT NULL DROP VIEW " + ViewName + ";");
		
	ЗапросСозданияView = СобратьЗапросДляView(Стр, ПараметрыИнтеграции,ИмяВладельца);
    
    objRecordset = ADODBConnect.Execute(ЗапросСозданияView);
//	
//	Если НЕ СтруктураПараметров.ВыбратьДанныеИзView Тогда 
//		возврат;
//	КонецЕсли;
//	
//	objRecordset = objConn.Execute("SELECT * FROM " + DBDstName + "." + DBDstSchema + Стр.ViewName + ";");
//	
//	//Перебираем результаты запроса
//	Пока objRecordset.EOF <> 1 Цикл
//		i = 0;
//		Буф = "";
//		Пока i <= objRecordset.Fields.Count-1 Цикл
//			
//			Если ТипЗнч(objRecordset.Fields(i).Value) = Тип("COMSafeArray") Тогда
//				Тмп = SafeArray2Стр(objRecordset.Fields(i).Value);
//			Иначе
//				Тмп = Строка(objRecordset.Fields(i).Value);
//			КонецЕсли;
//			
//			Буф = Буф + Тмп + Символы.Таб + "|";
//			i = i + 1;
//		КонецЦикла;
//		Сообщить(Буф);
//		objRecordset.MoveNext();
//	КонецЦикла;	
КонецПроцедуры

//Функция СобратьЗапросДляView(СтрТаблица, DBSrcName, DBSrcSchema, DBDstName, DBDstSchema,ИмяВладельца)
&НаСервере
Функция СобратьЗапросДляView(СтрТаблица, ПараметрыИнтеграции,ИмяВладельца)
	СписокПолей = "";
	Для Каждого Стр Из СтрТаблица.СоотвПолей Цикл
		Если Стр.ИмяПоляВБД = "_KeyField" Тогда
		  продолжить;
		КонецЕсли; 
		ИмяПоляВБД = ?(Стр.ИмяПоляВБД = "_IDRRef","CONVERT(uniqueidentifier,_IDRRef)",Стр.ИмяПоляВБД);
		СписокПолей = СписокПолей + ИмяПоляВБД + " AS [" + Стр.ИмяПоляДляView + "], ";
	КонецЦикла;
	Если ЗначениеЗаполнено(ИмяВладельца) Тогда
		 ИмяПоляВБД = "CONVERT(uniqueidentifier,"+ИмяВладельца+"_IDRRef)";
	     СписокПолей = СписокПолей + ИмяПоляВБД + " AS [_IDRRef], ";
	КонецЕсли; 
	СписокПолей = Лев(СписокПолей, СтрДлина(СписокПолей)-2); // cut comma
    
    Буф = "CREATE VIEW " + ПараметрыИнтеграции.СхемаПриемник + "[" +СтрТаблица.ViewName + "] AS SELECT " + СписокПолей + " FROM " + ПараметрыИнтеграции.БазаИсточник + "." + ПараметрыИнтеграции.СхемаИсточник + СтрТаблица.ИмяТаблицыВБД + ";";
	
	Возврат Буф;
КонецФункции


#КонецОбласти

// 
//&НаСервере
//Функция SafeArray2Стр(Arr)
//	
//	ВремМассив = Arr.Выгрузить();
//	
//	Буф = "";
//	Для Каждого Стр Из ВремМассив Цикл
//		Буф = Буф + Стр;
//	КонецЦикла;
//	
//	Возврат Буф;
//	
//КонецФункции








